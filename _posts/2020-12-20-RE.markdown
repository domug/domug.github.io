---
layout: post
title: "Regular Expression - Basics"
date: 2020-12-20 00:00:00
image: thumbnail_re.png
tags: [python, re]
categories: [DataMunging]
---

**Regular Expression** is a bunch of patterns that can be used to extract specific combinations of strings in a text. It is widely used in domains like NLP (Natural Language Processing) to handle text data and is especially useful in the data preprocessing steps. 

So in the following posts, we will talk about how to utilize some of the most important regular expressions in python with simple examples. 


---

# "re" package in python

In python, we can use regular expressions by `re` package. It is a bulit-in package in python, so we just need to import it to use it right away.

``import re``

There's not much of a theoretical background to be explained here, but keep in mind that almost every methods in `re` package work in the following syntax:

``re.method_name(pattern, string)``


With this being said, let's dig into each methods!

---

## 1. re.match()

`match()` method searches if the provided pattern exists at the **beginning** of a string. This method cannot consider multiple lines.

Here's an example.

<p align="center">
	<img src="{{site.baseurl}}/images/re/match.png">
</p>

Remember that the first argument indicates specific pattern to look for and the second argument indicates string of where the pattern will be applied. Here, I've used a distinctive pattern "a", which means to search for exact matching of an alphabet "a" at the beginning of the strings provided.



The printed result of the first line of code indicates that the pattern we are looking for is at the 0th index of the string that we provided. Since indices in python starts with 0, it is equivalent to saying that the pattern is at the very beginning of the string. The rest of the examples returned `None` as there is no "a" at the beginning of a string.


Note that the prefix "r" in front of each patterns simply indicates that it is a regular expression. It doesn't have any functionality, so it's up to you whether to include it for explicitation or not. The following code works exactly the same as above.

<p align="center">
	<img src="{{site.baseurl}}/images/re/match2.png">
</p>

---

## 2. re.search()

If `match()` method considered only the beginning of a single sentence, `search()` method is an extension of `match()`. 

`search()` returns the first element that matched our pattern throughout the whole string, so it's not confined to a single sentence. Keep in mind that it only **returns the first match**. It's commonly used for checking if a specific element is included in a sentence.

<p align="center">
	<img src="{{site.baseurl}}/images/re/search.png">
</p>

We can see that all of our examples returned "a" and its index as it is included in all of the strings that we provided. 

Now that we have the matched result, how can we actually extract the "actual" element? Like in above examples we want to get exact "a" instead of `re` object. 

Regarding this, there are 3 methods such as `group()`, `start()`, `end()`.

- `group()`: **returns the matched element**
- `start()`: **returns the start index** of matched element
- `end()`: **returns the end index** of matched element 


<p align="center">
	<img src="{{site.baseurl}}/images/re/group.png">
</p>

The results are presented accordingly.


On top of this, we can also include logical expressions in patterns. For example, use `|` to indicate **OR** expression like the following examples.

<p align="center">
	<img src="{{site.baseurl}}/images/re/or.png">
</p>

---

## 3. re.findall()

As its name explictly suggests, `findall()` method finds and pulls out **all the matched instances as a list**. Since there can be multiple return values, information about index is excluded.

<p align="center">
	<img src="{{site.baseurl}}/images/re/findall.png">
</p>

As the returned value is in a list form, we can apply all of the properties of list datatype in python like list indexing and slicing.

Also, keep in mind that we don't have to use methods like `.group()` to get the exact matching values since the result is returned in a list.


---


The way how we found matching elements so far is called as **Literal Matching**. What it means is that we designate specific values inside the patterns like "a", or "love" etc. This method can be inefficient if the pattern we are trying to search gets very complicated. 

Therefore, in more complex situations we often define regular expression patterns by **Character Sets** with **Quantifiers**. Let's take a look at each.

---

## 4. Character Sets

**Character Sets**, or equivalently **Character Classes**, are **"sets of elements"** which can be used in the patterns. For instance, if we want to find alphabets in the string, we can use character set that represents alphabets instead of specifying all of the alphabets in the pattern. It might not make sense at the moment, but soon it will be clear after seeing examples.

We are going to take a look at the most frequently used 6 character sets - `"\w"`, `"\W"`, `"\d"`, `"\D"`, `"\s"`, `"\S"`.

---

### 4-1. \w (Lower case w)

In regular expression, `\w` represents any character within the set `[a-zA-Z0-9_]`. In other words, it can be **any alphabet (regardless of case), number and underbar**. 

Notice that it **does not match any symbols except for the underbar ( `_` )**.

<p align="center">
	<img src="{{site.baseurl}}/images/re/w.png">
</p>

We can see that the first 4 consecutive combination of alphabets, numbers, and underbar is returned for each examples by `search()` method. Note that white spaces (blanks) are excluded!

---

### 4-2. \W (Upper case w)

As opposite to `\w`, capital letter `\W` represents **everything that is not included in `\w`**. So we can think of it as a complementary set in a mathematical sense.

To be more specific, `\W` matches **every non-alphabet, non-digit and non-underbar element** in a string.

<p align="center">
	<img src="{{site.baseurl}}/images/re/bigw.png">
</p>

In the first example, 4 consecutive "!" is returned and in the second example all hyphens and white spaces are returned.


---

### 4-3. \d (Lower case d)

`\d` stands for all **digits**. To put it formally, it matches every digit that is included in `[0-9]`.

<p align="center">
	<img src="{{site.baseurl}}/images/re/d.png">
</p>

The first example tells python to return every 3 consecutive numbers in a string. Since there is no digit in the second example, the returned list contains nothing.

---

### 4-4. \D (Upper case d)

Same as the case of `\w` and `\W`, capital `\D` indicates everything that is **not included in `\d`**. Therefore, it matches **any non-digit characters** in a string. Here's an example.

<p align="center">
	<img src="{{site.baseurl}}/images/re/bigd.png">
</p>

The first example returned every sequential combination of 3 consecutive non-digit elements whereas the second example returned all non-digit characters including white spaces.

---

### 4-5. \s (Lower case s)

On the other hand, `\s` in regular expression indicates **every whitespace characters**. Whitespace here includes blanks, tabs, new lines etc. So it's a good strategy to use `\s` if you want to check how many word spacings are there in a sentence for instance.

<p align="center">
	<img src="{{site.baseurl}}/images/re/s.png">
</p>

Note that `tab (\t)` is treated as a stand alone character instead of separate whitespaces.

---

### 4-6. \S (Upper case s)

Likewise, `\S` is a complement of `\s`. So it represents every **non-whitespace characters** including alphabets, numbers and even special characters.

<p align="center">
	<img src="{{site.baseurl}}/images/re/bigs.png">
</p>

We can see that every character except blanks are returned as the result of above example.


---

## 5. Quantifiers

We have seen 6 different character sets so far and in practice, they are often used with **quantifiers**. So what are quantifiers?

Let's say we have a string `"My phone number is 000-1234-5678"`, and we want to extract all of the separate chunks of numbers from this. By what we know so far, we can define regular expression pattern in the following way.

<p align="center">
	<img src="{{site.baseurl}}/images/re/quantifier_example.png">
</p>

It seems like the result is not what we desired. We wanted a list of `[000, 1234, 5678]`, but our code returned 3 digits and 4 digits separately. This is where quantifiers comes into play. By using quantifiers, we can make a pattern that accounts for "one or more numbers".

We will take a look at 4 prominent quantifiers, and they are `+`, `?`, `*`, `{n,m}`. Let's start with `+`.

---

### 5-1. "+" quantifier

`+` quantifier is also called as **greedy quantifier**. It simply means "**one or more times**". 

The syntax of including quantifers is to place them at the end of each set segments inside a pattern. Here's an example of using greedy quantifier.

<p align="center">
	<img src="{{site.baseurl}}/images/re/+.png">
</p>

Take a look at above example. By placing greedy quantifier at the right side of a character set `\d`, we are able to extract all separate chunks of phone numbers as desired. Regarding the second example, our python will interpret this pattern as to find one or more digits in a string and return them all.

The rest of the quantifiers work in similar ways, so once you can fully understand the previous example, the rest will be a free lunch.

---

### 5-2. "?" quantifier

`?` quantifier indicates "**zero or one times**". Consider the following example.

<p align="center">
	<img src="{{site.baseurl}}/images/re/quantifier2.png">
</p>

Since `?` is located right next to `\d` character set, the pattern implies "find 0 ~ 1 numbers in the string". Since `?` only accounts for up to 1 repetitions, we can see from the second example that second number is not included.


---

### 5-3. "\*" quantifier

`*` quantifier indicates "**zero or more times**". So it's simply saying to consider all situation regarding a specific character set.

<p align="center">
	<img src="{{site.baseurl}}/images/re/quantifier3.png">
</p>

Our pattern in above example tells python to search for the first occation of where zero or more numbers are used, so in the first line our code nothing was returned as well.

---

### 5-2. "{n,m}" quantifier

Lastly, `{n,m}` quantifier is a custom quantifier used to **pull out specific amount of characters**. Inside the brackets you can manually set the minimum and maximum number of occurances to look for. For example, `{,3}` would indicate any number of repetitions up to 3 times.



In fact, all three quantifiers we've looked at previously can be expressed by using `{n,m}` like the following.

<p align="center">
	<img src="{{site.baseurl}}/images/re/quantifier4.png">
</p>


---

This is the end for now! 

Until now we've looked at the basic methods of `re` package in python and how to use character sets and quantifiers to describe patterns efficiently. Just by using these, we can already handle lots of complex text data. So in the next post, we will take a look at some of the exercises together.










[code]: https://github.com/domug/Codes-for-blogs/blob/master/Dimension%20Reduction/LDA.R






